version: "3.9"
services:
  worker:
    depends_on:
      - mongodb
      - zookeeper
      - kafka
    build:
      context: .
      dockerfile: ./apps/worker/Dockerfile
    ports:
      - 9000:9000
    # volumes:
    # - ./apps/worker:/app
    # - /app/node_modules
    # env_file:
    # - ./apps/worker/.env
    environment:
      - NODE_ENV=dev
      - PORT=9000
      - DB_TYPE=mongodb
      - DB_URI=mongodb://admin:abc123456@mongodb:27017/starion-sync?directConnection=true&authSource=admin
      - BROKER_TYPE=kafka
      - BROKER_URIS=kafka:29092
      - KAFKA_CLIENT_ID=worker
      - KAFKA_CONSUMER_GROUP_ID=worker-consumer
      - KAFKA_SSL_ENABLED=false
      - ORCHESTRATOR_ADDRESS=temporal:7233
  #--------------------------------- DATABASE ---------------------------------------#
  mysql:
    image: mysql:8.0
    expose:
      - 3306
    ports:
      - 3306:3306
    volumes:
      - mysql:/var/lib/mysql
    command: mysqld --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD=abc123456@
      - MYSQL_DATABASE=starion-sync
      - MYSQL_ROOT_HOST=%
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpwd
    cap_add:
      - CAP_SYS_NICE
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    platform: linux/amd64
    ports:
      - 5000:80
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_ARBITRARY=1
  mongodb:
    image: mongo:5.0
    expose:
      - 27017
    ports:
      - 27017:27017
    command: mongod --auth
    volumes:
      - mongo:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=abc123456
      - MONGO_INITDB_DATABASE=starion-sync
  #--------------------------------- KAFKA ---------------------------------------#
  zookeeper:
    # restart: always
    image: confluentinc/cp-zookeeper:7.4.0
    expose:
      - 2181
    ports:
      - 2181:2181
    volumes:
      - "zookeeper-data:/var/lib/zookeeper/data"
      - "zookeeper-log:/var/lib/zookeeper/log"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
  kafka:
    depends_on:
      - zookeeper
    # restart: always
    image: confluentinc/cp-kafka:7.4.0
    expose:
      - 9092
      - 29092
    ports:
      - 9092:9092
    volumes:
      - kafka:/var/lib/kafka/data
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
  kafka-ui:
    depends_on:
      - kafka
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    volumes:
      - ./kui-config.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      DYNAMIC_CONFIG_ENABLED: true
  #--------------------------------- CONNECTOR ---------------------------------------#
  debezium:
    image: debezium/connect:2.3
    expose:
      - 8083
    ports:
      - 8083:8083
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
  #--------------------------------- ORCHESTRATOR (TEMPORAL) ---------------------------------------#
  elasticsearch:
    container_name: temporal-elasticsearch
    image: elasticsearch:7.17.10
    expose:
      - 9200
    ports:
      - 9200:9200
    volumes:
      - elasticsearch:/var/lib/elasticsearch/data
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
  postgresql:
    container_name: temporal-postgresql
    image: postgres:15.3-alpine3.18
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
  temporal:
    depends_on:
      - postgresql
      - elasticsearch
    container_name: temporal
    image: temporalio/auto-setup:1.20.3.2
    expose:
      - 7233
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./temporal-config.yml:/etc/temporal/config/dynamicconfig/development-sql.yaml
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
  # temporal-admin-tools:
    # container_name: temporal-admin-tools
    # depends_on:
      # - temporal
    # environment:
      # - TEMPORAL_CLI_ADDRESS=temporal:7233
    # image: temporalio/admin-tools:${TEMPORAL_VERSION}
    # networks:
      # - temporal-network
    # stdin_open: true
    # tty: true
  temporal-ui:
    depends_on:
      - temporal
    container_name: temporal-ui
    ports:
      - 8233:8080
    image: temporalio/ui:2.15.0
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
volumes:
  mongo:
  mysql:
  redis:
  zookeeper-log:
  zookeeper-data:
  kafka:
  elasticsearch:
  postgresql:
